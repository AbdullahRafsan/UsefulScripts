#! /usr/bin/env python3

import sys
if len(sys.argv) < 2:
    print("Need ftp url or path")
    exit()

import os
from typing import Self
import urllib.parse as up
import traceback
from enum import Enum

try:
    from tqdm import tqdm
    import requests
    from bs4 import BeautifulSoup, NavigableString
except:
    print("Installing dependencies.")
    ret = os.system("pip3 install bs4 tqdm requests")
    if ret != 0:
        print("pip3 failed. Trying pip instead.")
        ret2 = os.system("pip install bs4 tqdm requests")
        if ret2 != 0:
            print("Running pip failed somehow. Please install 'tqdm', 'bs4' and 'requests' manually")
            exit()
    from tqdm import tqdm
    import requests
    from bs4 import BeautifulSoup, NavigableString

TIMEPASSBD_URL = "http://ftp.timepassbd.live"
FTPBD1_URL = "http://server1.ftpbd.net"
FTPBD2_URL = "http://server2.ftpbd.net"
FTPBD3_URL = "http://server3.ftpbd.net"
FTPBD4_URL = "http://server4.ftpbd.net"
FTPBD5_URL = "http://server5.ftpbd.net"
FMFTP_URL = "https://fmftp.net"
DATA_DIR = os.getenv("HOME") + "/.ftpdl"

if not os.path.exists(DATA_DIR):
    os.mkdir(DATA_DIR)

# a class to hold item data
class FTPType(Enum):
    FILE = 0
    FOLDER = 1

    @classmethod
    def getType(self, url: str) -> Self:
        if url.endswith('/'):
            return self.FOLDER
        else:
            return self.FILE

class FTPItem:
    name: str
    url: str
    type: FTPType

    def __init__(self: Self, url: str) -> Self:
        self.url = url
        self.type = FTPType.getType(url)
        if self.type == FTPType.FILE:
            self.name = up.unquote_plus(url.split('/')[-1])
        else:
            self.name = up.unquote_plus(url.split('/')[-2])
    
    def __str__(self):
        return f"{self.name} is a {self.type}"

def not_implemented():
    print("Feature not yet implemented !")
    exit(0)

def timepassbd_ftpbd_list_logic(base_url: str, url: str) -> list[FTPItem]:
    itemList = []
    data = requests.get(url).text
    soup = BeautifulSoup(data,'html.parser')
    table = soup.table
    for tr in table:
        for td in tr:
            if td.name == 'td':
                if td.a != None:
                    path = td.a["href"]
                    if path != "..":
                        final_url = f"{base_url}{td.a['href']}"
                        itemList.append(FTPItem(final_url))
    return itemList

def fmftp_logic(url: str) -> list[FTPItem]:
    itemList = []
    data = requests.get(url).text
    soup = BeautifulSoup(data,'html.parser')
    pre = soup.find("pre")
    path = soup.find("h1").text[9:]
    for a in pre:
        if isinstance(a, NavigableString):
            continue
        it = FTPItem(f"{FMFTP_URL}{path}{a['href']}")
        if it.name != "..":
            itemList.append(it)
    return itemList


# a function that makes folder tree


# a function that makes folder list
def makeList(i: FTPItem) -> list[FTPItem]:   
    if i.url.startswith(TIMEPASSBD_URL):
        return timepassbd_ftpbd_list_logic(TIMEPASSBD_URL, i.url)
    elif i.url.startswith(FTPBD1_URL):
        return timepassbd_ftpbd_list_logic(FTPBD1_URL, i.url)
    elif i.url.startswith(FTPBD2_URL):
        return timepassbd_ftpbd_list_logic(FTPBD2_URL, i.url)
    elif i.url.startswith(FTPBD3_URL):
        return timepassbd_ftpbd_list_logic(FTPBD3_URL, i.url)
    elif i.url.startswith(FTPBD4_URL):
        return timepassbd_ftpbd_list_logic(FTPBD4_URL, i.url)
    elif i.url.startswith(FTPBD5_URL):
        return timepassbd_ftpbd_list_logic(FTPBD5_URL, i.url)
    elif i.url.startswith(FMFTP_URL):
        return fmftp_logic(i.url)
    else:
        not_implemented()



# Logic for timepassbd anfd ftpbd
def download(item: FTPItem):
    file_name = item.name
    res = requests.get(item.url, stream=True)
    total_size = int(res.headers.get('content-length',0))
    resume = False
    if os.path.exists(file_name):
        file = open(file_name, "rb+")
        file.seek(0,2)
        file_size = file.tell()
        # file.seek(0,0)
        if file_size == total_size:
            print(f"{file_name}: File exists.")
            return

        res.close()
        res2 = requests.get(item.url, stream=True, headers={"Range": f"bytes={file_size}-{total_size}"})
        resume = True
    else:
        file = open(file_name, "wb+")

    block_size = 8192
    if resume:
        print("Resuming: " + file_name)
        with tqdm(initial=file_size, total=total_size, unit="B", unit_scale=True, colour='RED') as pbar:
            for data in res2.iter_content(block_size):
                pbar.update(len(data))
                file.write(data)
    else:
        print("Downloading: " + file_name)
        with tqdm(total=total_size, unit="B", unit_scale=True, colour='RED') as pbar:
            for data in res.iter_content(block_size):
                pbar.update(len(data))
                file.write(data)
    
    file.close()
    if total_size != 0 and pbar.n != total_size:
        print("Download failed.")

# process everything inside
def process(url: str):
    i = FTPItem(url)
    if i.type == FTPType.FILE:
        download(i)
    else:
        
        if not os.path.exists(i.name):
            print(f"Creating {i.name}")
            os.mkdir(i.name)

        print(f"Entering {i.name}")
        os.chdir(i.name)
        
        for item in makeList(i):
            process(item.url)
        
        print("Going back")
        os.chdir("..")


# game begins
try:
    process(sys.argv[1])
except KeyboardInterrupt:
    print("User terminated.")
    exit(0)
except Exception as e:
    print("Some error occured. See the log file.")
    log = open(f"{DATA_DIR}/ftpdl.err.log", "w")
    log.write(f"{e}\n\n")
    log.write(f"{traceback.format_exc()}")
    log.close()
    exit(1)