#! /usr/bin/env python3

import sys
import os
import re
import datetime
from typing import Self
import urllib.parse as up
import traceback
from enum import Enum

FMSearchRegex = re.compile("""href=["'].+["']""", re.IGNORECASE)

# Dependency Init
try:
    from tqdm import tqdm
    import requests
    import argparse
    from bs4 import BeautifulSoup, NavigableString
except:
    print("""
ftpdl requires:
    BeautifulSoup
    Tqdm
    Request

Install with the following command:
    pip3 install bs4 tqdm requests --break-system-packages
If inside a virtual env:
    pip install bs4 tqdm requests --break-system-packages
""")
    exit(1)

# Server base URLs
TIMEPASSBD_URL = "http://ftp.timepassbd.live"
FMFTP_URL = "https://fmftp.net"

# Log Init
DATA_DIR = os.getenv("HOME") + "/.ftpdl"
if not os.path.exists(DATA_DIR):
    os.mkdir(DATA_DIR)
date = datetime.datetime.now().strftime("%Y-%m-%d.T%H-%M")
log = open(f"{DATA_DIR}/ftpdl.{date}.err.log", "w")


# A class to hold item data
class FTPType(Enum):
    FILE = 0
    FOLDER = 1

    @classmethod
    def getType(self, url: str) -> Self:
        if url.endswith('/'):
            return self.FOLDER
        else:
            return self.FILE

class FTPItem:
    name: str
    url: str
    type: FTPType

    def __init__(self: Self, url: str) -> Self:
        self.url = url
        self.type = FTPType.getType(url)
        if self.type == FTPType.FILE:
            self.name = up.unquote_plus(url.split('/')[-1])
        else:
            self.name = up.unquote_plus(url.split('/')[-2])
    
    def __str__(self):
        return f"{self.name} is a {self.type}"

def not_implemented():
    print("Feature not yet implemented !")
    exit(0)

def timepassbd_logic(url: str) -> list[FTPItem]:
    itemList = []
    data = requests.get(url).text
    soup = BeautifulSoup(data,'html.parser')
    table = soup.table
    for tr in table:
        for td in tr:
            if td.name == 'td':
                if td.a != None:
                    it = FTPItem(f"{TIMEPASSBD_URL}{td.a['href']}")
                    if it.name != ".." and not it.name.endswith(".."):
                        # print(f"Adding: {it.name}")
                        itemList.append(it)
    return itemList

def fmftp_logic(url: str) -> list[FTPItem]:
    global FMSearchRegex
    itemList = []
    data = requests.get(url).text
    data = FMSearchRegex.findall(data)
    for item in data:
        item = item[6:-1]
        if item[:-1] != "..":
            itemList.append(FTPItem(url+item))
        # yay

    # href=["'].+["']
    # <a href='indianbangla/'>indianbangla/</a>
    # soup = BeautifulSoup(data,'html.parser')
    # pre = soup.find("pre")
    # path = soup.find("h1").text[9:]
    # for a in pre:
    #     if isinstance(a, NavigableString):
    #         continue
    #     it = FTPItem(f"{FMFTP_URL}{path}{a['href']}")
    #     if it.name != "..":
    #         # print(f"Adding: {it.name}")
    #         itemList.append(it)
    return itemList


# a function that makes folder tree


# a function that makes folder list
def makeList(i: FTPItem) -> list[FTPItem]:   
    if i.url.startswith(TIMEPASSBD_URL):
        return timepassbd_logic(i.url)
    elif i.url.startswith(FMFTP_URL):
        return fmftp_logic(i.url)
    else:
        not_implemented()



# Logic for timepassbd anfd ftpbd
def download(item: FTPItem):
    file_name = item.name
    res = requests.get(item.url, stream=True)
    total_size = int(res.headers.get('content-length',0))
    resume = False
    if os.path.exists(file_name):
        file = open(file_name, "rb+")
        file.seek(0,2)
        file_size = file.tell()
        # file.seek(0,0)
        if file_size == total_size:
            print(f"{file_name}: File exists.")
            return

        res.close()
        res2 = requests.get(item.url, stream=True, headers={"Range": f"bytes={file_size}-{total_size}"})
        resume = True
    else:
        file = open(file_name, "wb+")

    block_size = 8192
    if resume:
        print("Resuming: " + file_name)
        with tqdm(initial=file_size, total=total_size, unit="B", unit_scale=True, colour='RED') as pbar:
            for data in res2.iter_content(block_size):
                pbar.update(len(data))
                file.write(data)
    else:
        print("Downloading: " + file_name)
        with tqdm(total=total_size, unit="B", unit_scale=True, colour='RED') as pbar:
            for data in res.iter_content(block_size):
                pbar.update(len(data))
                file.write(data)
    
    file.close()
    if total_size != 0 and pbar.n != total_size:
        print("Download failed.")

def do_search(item: FTPItem, sk: str) -> bool:
    if item.name.lower().__contains__(sk.lower()):
        print()
        print()
        print(f"Found: {item.name}")
        print(f"At: {item.url}")
        print()
        print()
        return True
    return False

# process everything inside
def process(url: str, search: bool, keyw: str = ""):
    i = FTPItem(url)

    if search:
        if i.type == FTPType.FOLDER:
            print(f"\033[KSearching: {i.name[:40]}", end="\r")
            if do_search(i, keyw):
                return
            else:
                for item in makeList(i):
                    process(item.url, search, keyw)
        else:
            if do_search(i, keyw):
                return

    else:
        if i.type == FTPType.FILE:
            download(i)
        else:
            if not os.path.exists(i.name):
                print(f"Creating {i.name}")
                os.mkdir(i.name)

            print(f"Entering {i.name}")
            os.chdir(i.name)

            for item in makeList(i):
                process(item.url, search, keyw)
            print("Going back")
            os.chdir("..")


    # if i.type == FTPType.FILE:
    #     if search:
    #         do_search(i, keyw)
    #     else:
    #         download(i)
    # else:
    #     if not search:
    #         if not os.path.exists(i.name):
    #             print(f"Creating {i.name}")
    #             os.mkdir(i.name)

    #         print(f"Entering {i.name}")
    #         os.chdir(i.name)
        
        # if search:
        #     print(f"\033[KSearching: {i.name[:40]}", end="\r")

        # for item in makeList(i):
        #     process(item.url, search, keyw)
        
        # if not search:
        #     print("Going back")
        #     os.chdir("..")



def main(url, search, keyw):
    try:
        process(url, search, keyw)
    except KeyboardInterrupt:
        print("User terminated.")
        exit(0)
    except Exception as e:
        print("Some error occured. See the log file.")
        log.write(f"{e}\n\n")
        log.write(f"{traceback.format_exc()}")
        log.close()
        exit(1)

# game begins

parser = argparse.ArgumentParser()
parser.add_argument("-u", "--url", help="Downloads a given url. Searches inside if used with -s")
parser.add_argument("-s", "--search", help="search for given keyword")

arg = parser.parse_args()

# print(arg.url)
# print(bool(arg.url))
# print(arg.search)
# print(bool(arg.search))

# exit() 

if arg.search:
    if arg.url:
        print(f"searching in: {FTPItem(arg.url).name}")
        main(arg.url, True, arg.search)
    else:
        print("Searching TimepassBD")
        main(f"{TIMEPASSBD_URL}/", True, arg.search)
        print("Searching FMFtp")
        main(f"{FMFTP_URL}/data/", True, arg.search)
    print("\nSearch Done")
    exit()

if arg.url:
    main(arg.url, False, "")
    exit()


if os.path.exists("ftpdl.link"):
    link_file = open("ftpdl.link", "r")
    for line in link_file:
        main(line, False, "")
    exit(0)
else:
    print("Please create a ftpdl.link file or provide a URL.")
    exit(1)
